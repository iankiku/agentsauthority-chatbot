---
alwaysApply: false
---
# Cursor AI Coding Rules - Vibeflow Project

## MANDATORY PRE-CODING CHECKLIST

Before writing ANY code, you MUST:

1. Read `.vibeflow/guardrails.md` - These are NON-NEGOTIABLE boundaries
2. Follow `.vibeflow/piper-5.mdc` - Use the structured workflow modes
3. Consult `.vibeflow/typescript.mdc` - Adhere to coding standards
4. Check package `BOUNDARY.md` files for import/export restrictions

## CRITICAL ENFORCEMENT RULES

### 1. IMMUTABLE PATHS - NEVER EDIT THESE

- `packages/eslint-config/*` - Shared presets, READ-ONLY
- `packages/typescript-config/*` - Shared TSConfig presets, READ-ONLY
- Auto-generated files (`.next`, `dist`, `.turbo`) - NEVER commit these
- `packages/ui/components.json` - Generated by shadcn, use CLI instead

### 2. PACKAGE BOUNDARIES - STRICTLY ENFORCED

- **Server/Core packages**: NO React, Tailwind, or browser APIs
- **UI packages**: NO database clients, Node.js `fs`, or server-only libs
- **Agent packages**: NO React or Tailwind
- Check each package's `BOUNDARY.md` before importing ANYTHING

### 3. TYPESCRIPT REQUIREMENTS

- NO `any` types - use strict TypeScript everywhere
- Functions with >2 args MUST use RORO pattern (Receive Object, Return Object)
- Use `interface` for public contracts, `type` for unions
- All booleans prefix with `is/has/should`
- English language only in code and comments

### 4. PIPER-5 MODE ENFORCEMENT

You MUST declare your current mode at the start of every response:

- `[MODE: RESEARCH]` - Understanding the task, no implementation
- `[MODE: INNOVATE]` - Exploring options, no commitments
- `[MODE: PLAN]` - Creating implementation spec with checklist
- `[MODE: EXECUTE]` - Building exactly what PLAN describes
- `[MODE: REVIEW]` - Verifying implementation matches plan

### 5. CONFIG FILE RESTRICTIONS

| File Type                      | Edit Permission  | Restrictions                        |
| ------------------------------ | ---------------- | ----------------------------------- |
| `packages/**/tsconfig.json`    | âœ… Limited       | Only add paths/outDir, keep extends |
| `packages/**/eslint.config.js` | âœ… Limited       | Must extend shared preset           |
| `packages/**/package.json`     | âœ… Package-scope | Add deps for this package only      |
| Root configs                   | ðŸš« FORBIDDEN     | Requires infra team approval        |

### 6. IMPORT/EXPORT PATTERNS

- Use workspace protocol: `@workspace/package-name`
- One export per line in `packages/ui/src/index.ts`
- Alphabetize exports
- No relative imports across package boundaries

### 7. COMMIT DISCIPLINE

- One checklist item per commit
- Format: `feat: 2.2 replace ui-artifacts imports`
- NO drive-by refactors
- Local commits only until REVIEW mode approves

### 8. ERROR HANDLING FOR VIOLATIONS

If you detect a guardrail violation:

1. STOP immediately
2. Reference the specific rule from `.vibeflow/guardrails.md`
3. Suggest the correct approach
4. Do NOT proceed until the violation is resolved

### 9. TASK FILE REQUIREMENTS

Every coding session MUST create/update a task file in
`.tasks/YYYY-MM-DD_x_description.md`:

- Include PIPER-5 mode declarations
- Log each checklist step with timestamps
- Reference guardrails: "ðŸ”— See .vibeflow/guardrails.md for boundaries"

### 10. CI/BUILD SAFETY

Before suggesting any changes:

- Run `pnpm build` to verify no breakage
- Check ESLint passes: `pnpm lint`
- Verify TypeScript compiles: `pnpm type-check`
- Test imports resolve correctly

## ESCALATION PROTOCOL

If unsure about ANY rule:

1. Reference `.vibeflow/` documentation first
2. Check package `BOUNDARY.md` files
3. Ask for clarification rather than guessing
4. Propose alternatives that stay within guardrails

## FORBIDDEN PHRASES/ACTIONS

- "Let's just add `any` for now" - NEVER
- "I'll modify the shared eslint config" - FORBIDDEN
- "Quick drive-by fix" - ONLY if in same task scope
- "Let me ignore TypeScript errors" - UNACCEPTABLE

Remember: These rules exist to prevent architectural drift and maintain
scalability. Violating them creates technical debt that compounds rapidly in a
monorepo.
