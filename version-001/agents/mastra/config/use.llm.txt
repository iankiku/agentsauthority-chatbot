# How to Use Agent Configuration Utility

This guide explains how to use the agent configuration utility for setting up AI agents with appropriate models, configurations, and settings.

## Basic Usage

### 1. Getting a Simple Model Instance

```typescript
import { getModel } from './agent-config';

// Get default base model for current environment
const model = getModel();

// Get specific model with local provider (default)
const specificModel = getModel("qwen3:latest");

// Get specific model with OpenRouter provider
const cloudModel = getModel("qwen3:latest", "openrouter");
```

### 2. Getting Complete Agent Configuration

```typescript
import { getConfig, getAgentType } from './agent-config';

// Method 1: With explicit agent type
const config = getConfig("My Planning Agent", "planner");

// Method 2: Let the utility determine type from name
const agentType = getAgentType("Master Planner");
const config2 = getConfig("Master Planner", agentType);

// Method 3: Generic configuration (uses base model)
const genericConfig = getConfig("Custom Agent");
```

### 3. Manual Configuration Override

```typescript
import { getModel } from './agent-config';

// Create custom configuration
const customConfig = {
    model: getModel("qwen3:latest"),
    temperature: 0.5,
    maxTokens: 2048,
    systemPrompt: "You are a helpful assistant specialized in data analysis."
};
```

## Agent Types and Their Configurations

### Reasoning Agents (Uses reasoning model: qwen3:latest)
```typescript
// These agents use the reasoning model for complex thinking
const plannerConfig = getConfig("Strategic Planner", "planner");
const reviewerConfig = getConfig("Quality Reviewer", "reviewer");
const orchestratorConfig = getConfig("GEO Orchestrator", "geo-orchestrator");
```

### Coding Agents (Uses coding model: qwen2.5-coder:latest)
```typescript
// Code-focused agents use the specialized coding model
const codeConfig = getConfig("Code Generator", "code-writer");
```

### Fast Agents (Uses fast model: mistral-small3.2:latest)
```typescript
// Quick response agents use the fast model
const weatherConfig = getConfig("Weather Bot", "weather");
const roastConfig = getConfig("Website Critic", "roast-website");
```

### Creative Agents (Uses base model: qwen3:latest)
```typescript
// Creative tasks use the base model
const copywriterConfig = getConfig("Content Creator", "ai-copywriter");
const promptConfig = getConfig("Prompt Designer", "prompt-simulator");
```

## Environment-Specific Usage

### Development Environment
```typescript
// In development, all models use local Ollama
const devConfig = getConfig("Test Agent", "planner");
// Uses: ollama("qwen3:latest") for reasoning
```

### Staging/Production Environment
```typescript
// In staging/production, reasoning and coding use OpenRouter
const prodConfig = getConfig("Production Agent", "planner");
// Uses: openrouter("qwen3:latest") for reasoning
```

## Utility Functions

### Check Available Models
```typescript
import { getAvailableModels } from './agent-config';

const models = getAvailableModels();
console.log(models);
// Output:
// {
//   reasoning: { name: "qwen3:latest", provider: "local" },
//   base: { name: "qwen3:latest", provider: "local" },
//   fast: { name: "mistral-small3.2:latest", provider: "local" },
//   coding: { name: "qwen2.5-coder:latest", provider: "local" }
// }
```

### Get Model Category
```typescript
import { getModelCategory } from './agent-config';

const category = getModelCategory("code-writer");
console.log(category); // "coding"
```

### Get Agent Type from Name
```typescript
import { getAgentType } from './agent-config';

const type = getAgentType("Master Planner");
console.log(type); // "planner"
```

## Complete Example: Creating a Custom Agent

```typescript
import { getConfig, getModel, getAgentType } from './agent-config';

// Example 1: Using predefined agent configuration
class PlanningAgent {
    private config;
    
    constructor() {
        this.config = getConfig("Strategic Planner", "planner");
        // Gets: reasoning model, temp: 0.3, maxTokens: 8192, specialized prompt
    }
    
    async plan(task: string) {
        // Use this.config.model for AI calls
        return await this.config.model.generate({
            prompt: `${this.config.systemPrompt}\n\nTask: ${task}`,
            temperature: this.config.temperature,
            maxTokens: this.config.maxTokens
        });
    }
}

// Example 2: Custom configuration with specific model
class CustomAgent {
    private config;
    
    constructor() {
        this.config = {
            model: getModel("qwen3:latest", "openrouter"),
            temperature: 0.7,
            maxTokens: 4096,
            systemPrompt: "You are a specialized data analyst."
        };
    }
}

// Example 3: Dynamic agent type detection
class FlexibleAgent {
    private config;
    
    constructor(agentName: string) {
        const agentType = getAgentType(agentName);
        this.config = getConfig(agentName, agentType);
    }
}
```

## Best Practices

1. **Use Agent Types**: Always specify agent types when possible for optimized model selection
2. **Environment Awareness**: The utility automatically handles environment-specific configurations
3. **Provider Selection**: Use OpenRouter for production workloads, local for development
4. **Model Categories**: Leverage the built-in categorization (reasoning, coding, fast, creative)
5. **Configuration Inheritance**: Agent-specific configs override base settings automatically

## Supported Agent Types

- **Hierarchical**: `planner`, `supervisor`, `reviewer`
- **GEO Suite**: `content-cluster`, `brand-monitor`, `topical-depth`, `prompt-simulator`, `static-render`, `ai-copywriter`, `prompt-trend`, `ai-readiness`, `geo-orchestrator`, `recommend`, `ingest`, `parse`
- **General**: `code-writer`, `weather`, `roast-website`

## Provider Configuration

- **Local**: Uses Ollama running locally
- **OpenRouter**: Uses OpenRouter's hosted models
- **Environment Variables**: 
  - `TURSO_URL`: For LibSQL memory store
  - `UPSTASH_URL`: For Upstash memory store in staging/production
  - `NODE_ENV`: Controls environment selection