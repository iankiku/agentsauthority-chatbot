"use client";

import { useState, useRef, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import type { UIMessage } from "@ai-sdk/react";
import { ArtifactRenderer } from "@/components/artifacts/artifact-renderer";
import { ArtifactPinButton } from "@/components/artifacts/artifact-pin-button";
import { Button } from "@workspace/ui/components/button";
import { Tooltip, TooltipContent, TooltipTrigger } from "@workspace/ui/components/tooltip";
import { 
  Maximize2, 
  Minimize2, 
  RotateCcw, 
  Download, 
  Share2,
  Code2,
  Eye,
  Settings
} from "lucide-react";
import { cn } from "@workspace/utils";

interface ArtifactCanvasProps {
  message: UIMessage;
  messages: UIMessage[];
  mode: 'chat' | 'artifact' | 'split';
}

type CanvasView = 'preview' | 'code' | 'settings';

export function ArtifactCanvas({ message, messages, mode }: ArtifactCanvasProps) {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [canvasView, setCanvasView] = useState<CanvasView>('preview');
  const [isLoading, setIsLoading] = useState(false);
  const canvasRef = useRef<HTMLDivElement>(null);

  const artifact = message?.toolInvocations?.[0]?.result as any;

  if (!artifact) {
    return (
      <div className="flex-1 flex items-center justify-center p-8 text-muted-foreground">
        <div className="text-center">
          <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-muted flex items-center justify-center">
            <Code2 className="w-8 h-8" />
          </div>
          <h3 className="text-lg font-medium mb-2">No Artifact Selected</h3>
          <p className="text-sm">Artifacts will appear here when generated by the AI</p>
        </div>
      </div>
    );
  }

  const handleFullscreen = () => {
    if (!isFullscreen && canvasRef.current) {
      canvasRef.current.requestFullscreen?.();
      setIsFullscreen(true);
    } else if (isFullscreen) {
      document.exitFullscreen?.();
      setIsFullscreen(false);
    }
  };

  const handleRefresh = () => {
    setIsLoading(true);
    // Simulate refresh
    setTimeout(() => setIsLoading(false), 1000);
  };

  const handleDownload = () => {
    // Implement download functionality
    console.log('Download artifact:', artifact);
  };

  const handleShare = () => {
    // Implement share functionality
    console.log('Share artifact:', artifact);
  };

  // Listen for fullscreen changes
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);
  }, []);

  return (
    <div 
      ref={canvasRef}
      className={cn(
        "flex flex-col h-full bg-background",
        isFullscreen && "fixed inset-0 z-50"
      )}
    >
      {/* Canvas Header */}
      <div className="flex items-center justify-between p-3 border-b bg-muted/30">
        <div className="flex items-center space-x-2">
          <div className="w-2 h-2 rounded-full bg-green-500" />
          <span className="text-sm font-medium">
            {artifact.type?.replace(/_/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase()) || 'Artifact'}
          </span>
        </div>

        <div className="flex items-center space-x-1">
          {/* View Toggle */}
          <div className="flex items-center space-x-1 bg-background rounded-md p-1 border mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <button
                  onClick={() => setCanvasView('preview')}
                  className={cn(
                    "p-1.5 rounded-sm transition-colors",
                    canvasView === 'preview' 
                      ? "bg-primary text-primary-foreground" 
                      : "hover:bg-muted"
                  )}
                >
                  <Eye className="w-4 h-4" />
                </button>
              </TooltipTrigger>
              <TooltipContent>Preview</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <button
                  onClick={() => setCanvasView('code')}
                  className={cn(
                    "p-1.5 rounded-sm transition-colors",
                    canvasView === 'code' 
                      ? "bg-primary text-primary-foreground" 
                      : "hover:bg-muted"
                  )}
                >
                  <Code2 className="w-4 h-4" />
                </button>
              </TooltipTrigger>
              <TooltipContent>View Code</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <button
                  onClick={() => setCanvasView('settings')}
                  className={cn(
                    "p-1.5 rounded-sm transition-colors",
                    canvasView === 'settings' 
                      ? "bg-primary text-primary-foreground" 
                      : "hover:bg-muted"
                  )}
                >
                  <Settings className="w-4 h-4" />
                </button>
              </TooltipTrigger>
              <TooltipContent>Settings</TooltipContent>
            </Tooltip>
          </div>

          {/* Action Buttons */}
          <ArtifactPinButton message={message} size="sm" />

          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleRefresh}
                disabled={isLoading}
                className="h-8 w-8 p-0"
              >
                <RotateCcw className={cn("w-4 h-4", isLoading && "animate-spin")} />
              </Button>
            </TooltipTrigger>
            <TooltipContent>Refresh</TooltipContent>
          </Tooltip>

          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleDownload}
                className="h-8 w-8 p-0"
              >
                <Download className="w-4 h-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>Download</TooltipContent>
          </Tooltip>

          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleShare}
                className="h-8 w-8 p-0"
              >
                <Share2 className="w-4 h-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>Share</TooltipContent>
          </Tooltip>

          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleFullscreen}
                className="h-8 w-8 p-0"
              >
                {isFullscreen ? (
                  <Minimize2 className="w-4 h-4" />
                ) : (
                  <Maximize2 className="w-4 h-4" />
                )}
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              {isFullscreen ? 'Exit Fullscreen' : 'Fullscreen'}
            </TooltipContent>
          </Tooltip>
        </div>
      </div>

      {/* Canvas Content */}
      <div className="flex-1 overflow-hidden">
        <AnimatePresence mode="wait">
          {canvasView === 'preview' && (
            <motion.div
              key="preview"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="h-full p-4 overflow-auto"
            >
              <ArtifactRenderer messages={[message]} />
            </motion.div>
          )}

          {canvasView === 'code' && (
            <motion.div
              key="code"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="h-full p-4 overflow-auto"
            >
              <pre className="text-sm bg-muted p-4 rounded-lg overflow-auto">
                <code>{JSON.stringify(artifact, null, 2)}</code>
              </pre>
            </motion.div>
          )}

          {canvasView === 'settings' && (
            <motion.div
              key="settings"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="h-full p-4 overflow-auto"
            >
              <div className="space-y-4">
                <h3 className="text-lg font-medium">Artifact Settings</h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Type:</span>
                    <span className="text-sm font-medium">{artifact.type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Created:</span>
                    <span className="text-sm font-medium">
                      {new Date().toLocaleDateString()}
                    </span>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}
